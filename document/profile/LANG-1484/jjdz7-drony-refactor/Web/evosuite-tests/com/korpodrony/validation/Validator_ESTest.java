/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 31 10:10:59 GMT 2023
 */

package com.korpodrony.validation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.turbo.DynamicThresholdFilter;
import com.korpodrony.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validator_ESTest extends Validator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateActivityTypeInteger("4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateString("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = (Logger) null;
      // Undeclared exception!
      try { 
        validator0.validateString("`JKG/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Validator validator0 = new Validator();
      LoggerContext loggerContext0 = new LoggerContext();
      ch.qos.logback.classic.Logger logger0 = loggerContext0.getLogger("u)$");
      validator0.logger = (Logger) logger0;
      DynamicThresholdFilter dynamicThresholdFilter0 = new DynamicThresholdFilter();
      loggerContext0.addTurboFilter(dynamicThresholdFilter0);
      // Undeclared exception!
      try { 
        validator0.validateString("Kk*XZTc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key parameter cannot be null
         //
         verifyException("org.slf4j.MDC", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = null;
      // Undeclared exception!
      try { 
        validator0.validateShort("Validating integer as positive value: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = null;
      // Undeclared exception!
      try { 
        validator0.validateIntegerAsPositiveValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Validator validator0 = new Validator();
      LoggerContext loggerContext0 = new LoggerContext();
      DynamicThresholdFilter dynamicThresholdFilter0 = new DynamicThresholdFilter();
      loggerContext0.addTurboFilter(dynamicThresholdFilter0);
      Class<Object> class0 = Object.class;
      ch.qos.logback.classic.Logger logger0 = loggerContext0.getLogger(class0);
      validator0.logger = (Logger) logger0;
      // Undeclared exception!
      try { 
        validator0.validateIntegerAsPositiveValue("EO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key parameter cannot be null
         //
         verifyException("org.slf4j.MDC", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = (Logger) null;
      // Undeclared exception!
      try { 
        validator0.validateInteger("R=K.5D#IBQf#9!]\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = (Logger) null;
      // Undeclared exception!
      try { 
        validator0.validateByte("The magic number must contain at least one byte");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Validator validator0 = new Validator();
      validator0.logger = (Logger) null;
      // Undeclared exception!
      try { 
        validator0.validateActivityTypeInteger("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.korpodrony.validation.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateByte("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateByte("+1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateByte("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateByte((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateShort("+1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateShort("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateShort("xuGY4?sa+i/-bmv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateActivityTypeInteger("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateActivityTypeInteger("+1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateActivityTypeInteger("8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateActivityTypeInteger("The class file for ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateIntegerAsPositiveValue("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateIntegerAsPositiveValue("+1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateIntegerAsPositiveValue("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateIntegerAsPositiveValue("xuGY4?sa+i/-bmv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateInteger("+1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateInteger("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateInteger("kQu+S[w`6Ijm{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Validator validator0 = new Validator();
      boolean boolean0 = validator0.validateString("kQu+S[w`6Ijm{");
      assertTrue(boolean0);
  }
}
