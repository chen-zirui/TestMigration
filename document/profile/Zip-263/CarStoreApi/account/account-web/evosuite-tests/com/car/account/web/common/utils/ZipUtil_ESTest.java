/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 08:53:11 GMT 2023
 */

package com.car.account.web.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.car.account.web.common.utils.ZipUtil;
import java.io.File;
import java.io.IOException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipUtil_ESTest extends ZipUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ng!{d>P3N-%");
      MockFile mockFile1 = new MockFile((File) mockFile0, "Ng!{d>P3N-%");
      try { 
        ZipUtil.compressFile(mockFile1, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File does not exist: /data1/ziruichen/TestMigration/resource/Zip-263/CarStoreApi/account/account-web/Ng!{d>P3N-%/Ng!{d>P3N-%
         //
         verifyException("net.lingala.zip4j.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile((File) mockFile0, "Ds(U");
      ZipUtil.compressFile(mockFile0, mockFile1);
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.lastModified());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = ZipUtil.renameFile("", "u$Dmcb{Lb+K");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        ZipUtil.renameFile("}r$K/Q'{)E714J)D", "}r$K/Q'{)E714J)D");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \u6587\u4EF6\u91CD\u547D\u540D\u5931\u8D25\uFF0C\u6587\u4EF6\uFF08}r$K/Q'{)E714J)D\uFF09\u4E0D\u5B58\u5728
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ZipUtil.unZip("}6-.Bnxw#n/", "c?[YB}#zg^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipUtil.copyFile("", "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.unZip("The filter must not be null", "3U`?SLyPOe{6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.unZip((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        ZipUtil.renameFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.getDirFiles((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.existZH((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.compressFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{B&MbPD.]WtP");
      MockFile mockFile1 = new MockFile((File) mockFile0, "{B&MbPD.]WtP");
      mockFile1.mkdirs();
      try { 
        ZipUtil.compressFile(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("net.lingala.zip4j.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/data1/ziruichen/TestMigration/resource/Zip-263/CarStoreApi/account/account-web/V`Z1`SGk-E");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "net.lingala.zip4j.headers.HeaderWriter");
      MockFile mockFile0 = new MockFile("");
      try { 
        ZipUtil.compressFile(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("net.lingala.zip4j.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/data1/ziruichen/TestMigration/resource/Zip-263/CarStoreApi/account/account-web/kw.WR99.p[XgFe6oX");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Nz}[rt&[J");
      ZipUtil.copyFile("kw.WR99.p[XgFe6oX", "Nz}[rt&[J");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipUtil.copyFile("org.apache.tools.zip.ZipShort", "\";[#");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bD\rUp0mLVNM");
      mockFile0.createNewFile();
      boolean boolean0 = ZipUtil.renameFile("bD\rUp0mLVNM", "bD\rUp0mLVNM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtil.unZip("Z=,.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.car.account.web.common.utils.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ZipUtil.unZip(".", ".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      List<String> list0 = ZipUtil.getDirFiles(mockFile0);
      assertEquals(10, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bD\rUp0mLVNM");
      List<String> list0 = ZipUtil.getDirFiles(mockFile0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = ZipUtil.existZH("\u539F\u6587\u4EF6\uFF1A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = ZipUtil.existZH("r]-#<>d1%8}Pz>su");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipUtil zipUtil0 = new ZipUtil();
  }
}
