/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 22 06:17:09 GMT 2023
 */

package gospl.algo.sr.bn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gospl.algo.sr.bn.CategoricalBayesianNetwork;
import gospl.algo.sr.bn.Factor;
import gospl.algo.sr.bn.IteratorCategoricalVariables;
import gospl.algo.sr.bn.NodeCategorical;
import java.io.File;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.spi.LoggerContextFactory;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoricalBayesianNetwork_ESTest extends CategoricalBayesianNetwork_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("_pN#=");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "JlvoY@Sn'");
      NodeCategorical nodeCategorical1 = new NodeCategorical(categoricalBayesianNetwork0, "\"$");
      nodeCategorical0.addParent(nodeCategorical1);
      Set<NodeCategorical> set0 = categoricalBayesianNetwork0.getAllAncestors(nodeCategorical0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("The reference file '");
      Set<NodeCategorical> set0 = categoricalBayesianNetwork0.nodes;
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "The reference file '");
      List<NodeCategorical> list0 = categoricalBayesianNetwork0.rankVariablesPerZeros(set0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("=%<!^|");
      List<NodeCategorical> list0 = categoricalBayesianNetwork0.enumerateNodes();
      List<NodeCategorical> list1 = categoricalBayesianNetwork0.rankVariablesForMultiplication(list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("8sE>Jz'-RVl%vU+Tuq");
      LRUMap<NodeCategorical, String> lRUMap0 = new LRUMap<NodeCategorical, String>();
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, (String) null);
      lRUMap0.put(nodeCategorical0, "8sE>Jz'-RVl%vU+Tuq");
      double double0 = categoricalBayesianNetwork0.jointProbabilityFromFactors(lRUMap0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue((Collection<NodeCategorical>) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CategoricalBayesianNetwork.readFromXMLBIF((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.DocumentHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CategoricalBayesianNetwork.readFromXMLBIF("core.metamodel.entity.comparator.HammingEntityComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid XML BIF format
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork((String) null);
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.rankVariablesPerZeros((Collection<NodeCategorical>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("f3gBB+>");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.rankVariablesForMultiplication((Collection<NodeCategorical>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CategoricalBayesianNetwork.loadFromXMLBIF((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("RY");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.getFactor((NodeCategorical) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("\"|aiVc^'C");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.getAllAncestors((NodeCategorical) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogManager.setFactory((LoggerContextFactory) null);
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = null;
      try {
        categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("|x(^A.=S0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.logging.log4j.LogManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("z2f$WH<\nYAh<Hc%");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "gq0DC*@q^c$'>S");
      Set<NodeCategorical> set0 = categoricalBayesianNetwork0.getAllAncestors(nodeCategorical0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue((Collection<NodeCategorical>) set0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keys and values
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork(".backup");
      HashSet<NodeCategorical> hashSet0 = new HashSet<NodeCategorical>();
      IteratorCategoricalVariables iteratorCategoricalVariables0 = categoricalBayesianNetwork0.iterateDomains((Collection<NodeCategorical>) hashSet0);
      assertTrue(iteratorCategoricalVariables0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("Pattern is missing");
      categoricalBayesianNetwork0.notifyNodesChanged();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown value null for variable 
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue((Collection<NodeCategorical>) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown value null for variable 
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("computing posteriors for p({}={}|{})");
      String[] stringArray0 = new String[0];
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "computing posteriors for p({}={}|{})");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keys and values
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown variable null
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue((Collection<NodeCategorical>) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown variable null
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("(=sz%e)V]NwmpB");
      LRUMap<NodeCategorical, String> lRUMap0 = new LRUMap<NodeCategorical, String>();
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.jointProbabilityFromFactors(lRUMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork((String) null);
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "x2vGRRE");
      LRUMap<NodeCategorical, String> lRUMap0 = new LRUMap<NodeCategorical, String>(100);
      lRUMap0.put(nodeCategorical0, (String) null);
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.jointProbability(lRUMap0, lRUMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("8sE>Jz'-RVl%vU+Tuq");
      LRUMap<NodeCategorical, String> lRUMap0 = new LRUMap<NodeCategorical, String>();
      double double0 = categoricalBayesianNetwork0.jointProbability(lRUMap0, lRUMap0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("wrong parameters: expected values for each parent of ");
      Namespace namespace0 = Namespace.get("", "wrong parameters: expected values for each parent of ");
      QName qName0 = new QName("@!", namespace0);
      BeanElement beanElement0 = new BeanElement(qName0, (Object) "@!");
      Class<NodeCategorical> class0 = NodeCategorical.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.iterateDomains((Collection<NodeCategorical>) beanAttributeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some of these nodes [org.dom4j.bean.BeanAttribute@6 [Attribute: name allAncestors value \"null\"], org.dom4j.bean.BeanAttribute@7 [Attribute: name allChildren value \"null\"], org.dom4j.bean.BeanAttribute@8 [Attribute: name cardinality value \"null\"], org.dom4j.bean.BeanAttribute@9 [Attribute: name children value \"null\"], org.dom4j.bean.BeanAttribute@a [Attribute: name class value \"java.lang.Class@0000000021\"], org.dom4j.bean.BeanAttribute@b [Attribute: name countOfZeros value \"null\"], org.dom4j.bean.BeanAttribute@c [Attribute: name domain value \"null\"], org.dom4j.bean.BeanAttribute@d [Attribute: name domainSize value \"null\"], org.dom4j.bean.BeanAttribute@e [Attribute: name name value \"null\"], org.dom4j.bean.BeanAttribute@f [Attribute: name parents value \"null\"], org.dom4j.bean.BeanAttribute@10 [Attribute: name parentsDimensionality value \"null\"], org.dom4j.bean.BeanAttribute@11 [Attribute: name probabilities value \"null\"], org.dom4j.bean.BeanAttribute@12 [Attribute: name sum value \"null\"], org.dom4j.bean.BeanAttribute@13 [Attribute: name valid value \"null\"], org.dom4j.bean.BeanAttribute@14 [Attribute: name valueIndexed value \"null\"]] do not belong this Bayesian network []
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("The reference file '");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "The reference file '");
      Factor factor0 = categoricalBayesianNetwork0.getFactor(nodeCategorical0);
      Factor factor1 = categoricalBayesianNetwork0.getFactor(nodeCategorical0);
      assertNotNull(factor1);
      assertSame(factor1, factor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("U");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "#*b vFy*RLa");
      categoricalBayesianNetwork0.prune(nodeCategorical0);
      assertFalse(nodeCategorical0.hasParents());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("the bn is not valid: ");
      // Undeclared exception!
      try { 
        categoricalBayesianNetwork0.toNodeAndValue((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The reference file '");
      // Undeclared exception!
      try { 
        CategoricalBayesianNetwork.loadFromXMLBIF(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to read file The reference file '
         //
         verifyException("gospl.algo.sr.bn.CategoricalBayesianNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("I]'cX2!0D}7->jYyLU");
      IteratorCategoricalVariables iteratorCategoricalVariables0 = categoricalBayesianNetwork0.iterateDomains();
      assertTrue(iteratorCategoricalVariables0.hasNext());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("I]'cX2!0D}7->jYyLU");
      NodeCategorical nodeCategorical0 = new NodeCategorical(categoricalBayesianNetwork0, "I]'cX2!0D}7->jYyLU");
      Set<NodeCategorical> set0 = categoricalBayesianNetwork0.getAllAncestors(nodeCategorical0);
      List<NodeCategorical> list0 = categoricalBayesianNetwork0.rankVariablesForMultiplication(set0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoricalBayesianNetwork categoricalBayesianNetwork0 = new CategoricalBayesianNetwork("The reference file '");
      TreeSet<NodeCategorical> treeSet0 = new TreeSet<NodeCategorical>();
      List<NodeCategorical> list0 = categoricalBayesianNetwork0.rankVariablesPerZeros(treeSet0);
      assertTrue(list0.isEmpty());
  }
}
