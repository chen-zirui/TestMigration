/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 28 12:34:58 GMT 2023
 */

package org.jadice.filetype.matchers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jadice.filetype.AnalysisListener;
import org.jadice.filetype.Context;
import org.jadice.filetype.io.MemoryInputStream;
import org.jadice.filetype.io.RandomAccessFileInputStream;
import org.jadice.filetype.io.SeekableInputStream;
import org.jadice.filetype.matchers.OpenDocumentMatcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenDocumentMatcher_ESTest extends OpenDocumentMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenDocumentMatcher openDocumentMatcher0 = new OpenDocumentMatcher();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Locale locale0 = Locale.CHINA;
      Context context0 = new Context((SeekableInputStream) null, (Map<String, Object>) hashMap0, (AnalysisListener) null, locale0, "\"~_>P\"N@");
      boolean boolean0 = openDocumentMatcher0.matches(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenDocumentMatcher openDocumentMatcher0 = new OpenDocumentMatcher();
      // Undeclared exception!
      try { 
        openDocumentMatcher0.matches((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jadice.filetype.matchers.OpenDocumentMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenDocumentMatcher openDocumentMatcher0 = new OpenDocumentMatcher();
      byte[] byteArray0 = new byte[6];
      MemoryInputStream memoryInputStream0 = new MemoryInputStream(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Locale locale0 = Locale.CHINA;
      Context context0 = new Context((SeekableInputStream) memoryInputStream0, (Map<String, Object>) hashMap0, (AnalysisListener) null, locale0, "org.apache.commons.io.filefilter.DelegateFileFilter");
      boolean boolean0 = openDocumentMatcher0.matches(context0);
      assertEquals(4L, memoryInputStream0.getStreamPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenDocumentMatcher openDocumentMatcher0 = new OpenDocumentMatcher();
      MockFile mockFile0 = new MockFile("");
      RandomAccessFileInputStream randomAccessFileInputStream0 = new RandomAccessFileInputStream((File) mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Context context0 = new Context((SeekableInputStream) randomAccessFileInputStream0, (Map<String, Object>) hashMap0, (AnalysisListener) null, (Locale) null, "U~EU+5)4dvE,mwrgW?");
      boolean boolean0 = openDocumentMatcher0.matches(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      RandomAccessFileInputStream randomAccessFileInputStream0 = new RandomAccessFileInputStream((File) mockFile0);
      OpenDocumentMatcher.DontCloseFilter openDocumentMatcher_DontCloseFilter0 = new OpenDocumentMatcher.DontCloseFilter(randomAccessFileInputStream0);
      openDocumentMatcher_DontCloseFilter0.close();
  }
}
