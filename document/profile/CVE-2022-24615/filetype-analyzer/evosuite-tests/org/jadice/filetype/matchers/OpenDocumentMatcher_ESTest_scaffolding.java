/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jul 28 12:34:58 GMT 2023
 */

package org.jadice.filetype.matchers;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class OpenDocumentMatcher_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.jadice.filetype.matchers.OpenDocumentMatcher"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(OpenDocumentMatcher_ESTest_scaffolding.class.getClassLoader() ,
      "org.jadice.filetype.io.PhantomReferenceSweeper$SweeperThread",
      "org.jadice.filetype.io.PhantomReferenceSweeper$CleanupCloseable",
      "org.jadice.filetype.AnalysisListener",
      "org.jadice.filetype.io.PhantomReferenceSweeper",
      "net.lingala.zip4j.util.Zip4jUtil",
      "net.lingala.zip4j.io.inputstream.CipherInputStream",
      "net.lingala.zip4j.io.inputstream.DecompressedInputStream",
      "net.lingala.zip4j.io.inputstream.ZipInputStream",
      "net.lingala.zip4j.model.enums.CompressionMethod",
      "net.lingala.zip4j.headers.HeaderSignature",
      "net.lingala.zip4j.model.LocalFileHeader",
      "net.lingala.zip4j.io.inputstream.AesCipherInputStream",
      "net.lingala.zip4j.exception.ZipException$Type",
      "org.jadice.filetype.matchers.OpenDocumentMatcher$DontCloseFilter",
      "org.jadice.filetype.io.SeekableInputStream",
      "org.jadice.filetype.matchers.Matcher",
      "net.lingala.zip4j.io.inputstream.NoCipherInputStream",
      "org.jadice.filetype.matchers.OpenDocumentMatcher",
      "net.lingala.zip4j.model.FileHeader",
      "net.lingala.zip4j.io.inputstream.InflaterInputStream",
      "net.lingala.zip4j.model.enums.EncryptionMethod",
      "org.jadice.filetype.io.RandomAccessFileInputStream",
      "net.lingala.zip4j.model.Zip4jConfig",
      "net.lingala.zip4j.headers.HeaderReader",
      "net.lingala.zip4j.model.AbstractFileHeader",
      "org.jadice.filetype.domutil.DOMUtil",
      "org.jadice.filetype.Context",
      "net.lingala.zip4j.exception.ZipException",
      "net.lingala.zip4j.model.ZipHeader",
      "net.lingala.zip4j.io.inputstream.ZipEntryInputStream",
      "org.jadice.filetype.matchers.OpenDocumentMatcher$OpenDocumenType",
      "org.jadice.filetype.io.MemoryInputStream",
      "net.lingala.zip4j.io.inputstream.ZipStandardCipherInputStream",
      "net.lingala.zip4j.io.inputstream.StoreInputStream",
      "net.lingala.zip4j.util.RawIO",
      "net.lingala.zip4j.crypto.Decrypter"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(OpenDocumentMatcher_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.jadice.filetype.matchers.OpenDocumentMatcher$OpenDocumenType",
      "org.jadice.filetype.domutil.DOMUtil",
      "org.jadice.filetype.io.SeekableInputStream",
      "org.jadice.filetype.io.MemoryInputStream",
      "net.lingala.zip4j.model.enums.EncryptionMethod",
      "net.lingala.zip4j.headers.HeaderSignature",
      "net.lingala.zip4j.util.Zip4jUtil",
      "net.lingala.zip4j.exception.ZipException",
      "net.lingala.zip4j.exception.ZipException$Type",
      "org.jadice.filetype.io.RandomAccessFileInputStream",
      "org.jadice.filetype.io.PhantomReferenceSweeper",
      "org.jadice.filetype.io.PhantomReferenceSweeper$CleanupCloseable"
    );
  }
}
