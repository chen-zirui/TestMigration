/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 28 14:15:50 GMT 2023
 */

package com.quasiris.qsf.pipeline.filter.solr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.quasiris.qsf.dto.response.Document;
import com.quasiris.qsf.dto.response.SearchResult;
import com.quasiris.qsf.pipeline.filter.solr.Solr2SearchResultMappingTransformer;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solr2SearchResultMappingTransformer_ESTest extends Solr2SearchResultMappingTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      SolrDocument solrDocument0 = new SolrDocument();
      solrDocument0.put("qrK'F(f%", (Object) solrDocument0);
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.transformDocument(solrDocument0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.transformDocument((SolrDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.quasiris.qsf.pipeline.filter.solr.Solr2SearchResultMappingTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      QueryResponse queryResponse0 = new QueryResponse();
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.transform(queryResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.quasiris.qsf.pipeline.filter.solr.Solr2SearchResultMappingTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.setFieldMapping((Map<String, List<String>>) null);
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.print("Y]$I:P\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.quasiris.qsf.util.PrintUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.mapFacets((QueryResponse) null, searchResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.quasiris.qsf.pipeline.filter.solr.Solr2SearchResultMappingTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      solr2SearchResultMappingTransformer0.setFacetNameMapping(map0);
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.addFacetNameMapping("z8j1qhX5 6NjA:null", "<.0KwSp");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      hashMap0.put("facetMapping", list0);
      solr2SearchResultMappingTransformer0.setFieldMapping(hashMap0);
      solr2SearchResultMappingTransformer0.addFieldMapping("facetMapping", "!$ns!1kPJ!");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      String string0 = "p%Mz*\\uAB";
      Document document0 = new Document(string0);
      solr2SearchResultMappingTransformer0.addFieldMapping((String) null, "O");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      solr2SearchResultMappingTransformer0.transformField(document0, (String) null, mockHijrahDate0);
      assertEquals(1, document0.getFieldCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      String string0 = "p%Mz*\\uAB";
      Document document0 = new Document(string0);
      solr2SearchResultMappingTransformer0.addFieldMapping((String) null, (String) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      solr2SearchResultMappingTransformer0.transformField(document0, (String) null, mockHijrahDate0);
      assertEquals(0, document0.getFieldCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.addResultField("Na<MXAbj3LoPI", "facetNameMapping (2917)");
      SolrDocument solrDocument0 = new SolrDocument();
      Document document0 = solr2SearchResultMappingTransformer0.transformDocument(solrDocument0);
      assertEquals(1, document0.getFieldCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      SolrDocument solrDocument0 = new SolrDocument();
      solrDocument0.put("", (Object) "");
      Document document0 = solr2SearchResultMappingTransformer0.transformDocument(solrDocument0);
      assertNull(document0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      SolrDocument solrDocument0 = new SolrDocument();
      Document document0 = solr2SearchResultMappingTransformer0.transformDocument(solrDocument0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      solr2SearchResultMappingTransformer0.transformField(document0, "", mockMinguoDate0);
      assertEquals(0, document0.getFieldCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      QueryResponse queryResponse0 = new QueryResponse();
      solr2SearchResultMappingTransformer0.mapFacets(queryResponse0, (SearchResult) null);
      assertNull(queryResponse0.getRequestUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      QueryResponse queryResponse0 = new QueryResponse();
      SearchResult searchResult0 = new SearchResult();
      queryResponse0.removeFacets();
      solr2SearchResultMappingTransformer0.mapFacets(queryResponse0, searchResult0);
      assertNull(queryResponse0.getRequestUrl());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      StringBuilder stringBuilder0 = solr2SearchResultMappingTransformer0.print("$VALUES");
      assertEquals("$VALUES\tfieldMapping: \n$VALUES\tresultFields: \n$VALUES\tfacetMapping: \n$VALUES\tfacetNameMapping: \n$VALUES\tfilterPrefix: \n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      solr2SearchResultMappingTransformer0.setFacetMapping(map0);
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.addFacetMapping((String) null, (String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.setFacetNameMapping((Map<String, String>) null);
      // Undeclared exception!
      try { 
        solr2SearchResultMappingTransformer0.addFacetNameMapping("9n+U", "9n+U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.quasiris.qsf.pipeline.filter.solr.Solr2SearchResultMappingTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.addFacetNameMapping("9n+U", "9n+U");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.filterPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Solr2SearchResultMappingTransformer solr2SearchResultMappingTransformer0 = new Solr2SearchResultMappingTransformer();
      solr2SearchResultMappingTransformer0.addFacetMapping("qrK'F(f%", "");
  }
}
