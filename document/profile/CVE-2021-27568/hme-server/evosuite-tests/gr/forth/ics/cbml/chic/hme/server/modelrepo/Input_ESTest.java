/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 28 13:48:32 GMT 2023
 */

package gr.forth.ics.cbml.chic.hme.server.modelrepo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gr.forth.ics.cbml.chic.hme.server.modelrepo.Input;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UUID;
import net.minidev.json.JSONObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Input_ESTest extends Input_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input input0 = input_InputBuilder0.build();
      boolean boolean0 = input0.equals(input0);
      assertTrue(boolean0);
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(43, uUID0, "YLX[", "", true, "nVIO7ErloeWKI\"VK", true, "", "", "9NE", "$9HQ-LflLLlB/-5", linkedList0);
      Input input1 = input0.withValue("");
      assertEquals("", input0.getUnit());
      assertTrue(input0.isDynamic());
      assertEquals(43, input0.getId());
      assertEquals("9NE", input1.getRange());
      assertFalse(input1.equals((Object)input0));
      assertNotSame(input1, input0);
      assertEquals("", input0.getDescription());
      assertTrue(input0.isMandatory());
      assertEquals("", input0.getDataType());
      assertEquals("YLX[", input1.getName());
      assertEquals(43, input1.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      input_InputBuilder0.id((-2436));
      Input input0 = input_InputBuilder0.build();
      Input input1 = input0.withValue("$?e^J");
      assertEquals(-2436, input1.getId());
      assertFalse(input1.equals((Object)input0));
      assertNotSame(input1, input0);
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
      assertEquals(-2436, input0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(97, uUID0, " Object together", (String) null, true, (String) null, true, "", "", "|KUMYR%Io^ZC", "l]t+.kEj6D'6yn]bU", linkedList0);
      boolean boolean0 = input0.isMandatory();
      assertEquals("", input0.getDataType());
      assertTrue(boolean0);
      assertEquals(" Object together", input0.getName());
      assertEquals("", input0.getUnit());
      assertTrue(input0.isDynamic());
      assertEquals("|KUMYR%Io^ZC", input0.getRange());
      assertEquals(97, input0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(79, uUID0, " 3j", "PzO.qIjAQtpL", false, " 3j", true, ")", ")", "", "PzO.qIjAQtpL", linkedList0);
      input0.getUuid();
      assertEquals(" 3j", input0.getName());
      assertEquals(79, input0.getId());
      assertFalse(input0.isMandatory());
      assertEquals("PzO.qIjAQtpL", input0.getDescription());
      assertTrue(input0.isDynamic());
      assertEquals(")", input0.getDataType());
      assertEquals("", input0.getRange());
      assertEquals(")", input0.getUnit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(45, uUID0, ">83Fx", ")UtejTU<D{%", false, ">83Fx", false, ">83Fx", ">83Fx", ">83Fx", ", dynamic=", linkedList0);
      String string0 = input0.getUnit();
      assertEquals(">83Fx", string0);
      assertFalse(input0.isMandatory());
      assertEquals(45, input0.getId());
      assertFalse(input0.isDynamic());
      assertEquals(">83Fx", input0.getName());
      assertEquals(")UtejTU<D{%", input0.getDescription());
      assertEquals(">83Fx", input0.getDataType());
      assertEquals(">83Fx", input0.getRange());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(97, uUID0, " Object together", (String) null, true, (String) null, true, "", "", "|KUMYR%Io^ZC", "l]t+.kEj6D'6yn]bU", linkedList0);
      String string0 = input0.getUnit();
      assertEquals("|KUMYR%Io^ZC", input0.getRange());
      assertEquals("", string0);
      assertTrue(input0.isDynamic());
      assertEquals(" Object together", input0.getName());
      assertTrue(input0.isMandatory());
      assertEquals(97, input0.getId());
      assertNotNull(string0);
      assertEquals("", input0.getDataType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input input0 = input_InputBuilder0.build();
      input0.getSemTypes();
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(78, (UUID) null, "Impossible Exeption", "Impossible Exeption", false, (String) null, false, "SP K$IH_t1[,VUU\u0006", "", "", (String) null, linkedList0);
      linkedList0.add("l'0dk2j5");
      input0.getSemTypes();
      assertEquals("Impossible Exeption", input0.getName());
      assertEquals("", input0.getRange());
      assertEquals("SP K$IH_t1[,VUU\u0006", input0.getDataType());
      assertFalse(input0.isDynamic());
      assertEquals(78, input0.getId());
      assertEquals("", input0.getUnit());
      assertFalse(input0.isMandatory());
      assertEquals("Impossible Exeption", input0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Input input0 = new Input((-3041), uUID0, "Bho5cc!Q&pD2", "net.minidev.json.JSONValue", true, "Bho5cc!Q&pD2", true, ", uuid=", "file", ", uuid=", (String) null, list0);
      input0.getSemTypes();
      assertEquals("Bho5cc!Q&pD2", input0.getName());
      assertTrue(input0.isDynamic());
      assertEquals(", uuid=", input0.getRange());
      assertEquals(-3041, input0.getId());
      assertEquals(", uuid=", input0.getDataType());
      assertEquals("net.minidev.json.JSONValue", input0.getDescription());
      assertEquals("file", input0.getUnit());
      assertTrue(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input((-3939), (UUID) null, "&S9'", "$A?Lb+ja#I_ln-f5", false, "&S9'", false, "&S9'", "", "&S9'", "", linkedList0);
      String string0 = input0.getRange();
      assertEquals("&S9'", input0.getDataType());
      assertEquals(-3939, input0.getId());
      assertEquals("", input0.getUnit());
      assertEquals("&S9'", string0);
      assertEquals("&S9'", input0.getName());
      assertFalse(input0.isDynamic());
      assertEquals("$A?Lb+ja#I_ln-f5", input0.getDescription());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      input_InputBuilder0.range("");
      Input input0 = input_InputBuilder0.build();
      String string0 = input0.getRange();
      assertEquals(0, input0.getId());
      assertNotNull(string0);
      assertFalse(input0.isMandatory());
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(43, uUID0, "YLX[", "", true, "nVIO7ErloeWKI\"VK", true, "", "", "9NE", "$9HQ-LflLLlB/-5", linkedList0);
      String string0 = input0.getName();
      assertEquals("YLX[", string0);
      assertEquals("", input0.getDataType());
      assertEquals("9NE", input0.getRange());
      assertEquals(43, input0.getId());
      assertTrue(input0.isMandatory());
      assertTrue(input0.isDynamic());
      assertEquals("", input0.getUnit());
      assertEquals("", input0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Input input0 = new Input((-1549), uUID0, "", "", true, "", true, "", (String) null, (String) null, (String) null, list0);
      String string0 = input0.getName();
      assertTrue(input0.isDynamic());
      assertTrue(input0.isMandatory());
      assertNotNull(string0);
      assertEquals(-1549, input0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      input_InputBuilder0.id(1304);
      Input input0 = input_InputBuilder0.build();
      int int0 = input0.getId();
      assertEquals(1304, int0);
      assertFalse(input0.isMandatory());
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Input input0 = new Input((-2527), uUID0, "%lx )nWJ\" 0q", "%lx )nWJ\" 0q", false, "is_mandatory", false, "%lx )nWJ\" 0q", "%lx )nWJ\" 0q", "c|Pds\"gmu", "c|Pds\"gmu", (List<String>) null);
      int int0 = input0.getId();
      assertEquals("%lx )nWJ\" 0q", input0.getName());
      assertEquals((-2527), int0);
      assertFalse(input0.isDynamic());
      assertEquals("c|Pds\"gmu", input0.getRange());
      assertFalse(input0.isMandatory());
      assertEquals("%lx )nWJ\" 0q", input0.getDataType());
      assertEquals("%lx )nWJ\" 0q", input0.getDescription());
      assertEquals("%lx )nWJ\" 0q", input0.getUnit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("null");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(0, uUID0, "is_mandatory", "null", false, "null", true, "null", "2i0.", (String) null, "", linkedList0);
      String string0 = input0.getDescription();
      assertEquals("null", string0);
      assertEquals("2i0.", input0.getUnit());
      assertEquals(0, input0.getId());
      assertEquals("is_mandatory", input0.getName());
      assertTrue(input0.isDynamic());
      assertFalse(input0.isMandatory());
      assertNotNull(string0);
      assertEquals("null", input0.getDataType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      Input input0 = new Input((-462), uUID0, (String) null, "", true, (String) null, true, "", "", "3Yp2Q4Wf{hT.z/)VV]v", "", (List<String>) null);
      String string0 = input0.getDescription();
      assertEquals("3Yp2Q4Wf{hT.z/)VV]v", input0.getRange());
      assertEquals(-462, input0.getId());
      assertNotNull(string0);
      assertEquals("", input0.getDataType());
      assertEquals("", string0);
      assertTrue(input0.isMandatory());
      assertTrue(input0.isDynamic());
      assertEquals("", input0.getUnit());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(3, (UUID) null, "&]:<", "!", false, "fDam6D", false, " Object together", " 8 XqF", " Object together", "", linkedList0);
      String string0 = input0.getDataType();
      assertEquals(" Object together", string0);
      assertEquals(3, input0.getId());
      assertEquals("&]:<", input0.getName());
      assertEquals(" Object together", input0.getRange());
      assertFalse(input0.isMandatory());
      assertFalse(input0.isDynamic());
      assertEquals(" 8 XqF", input0.getUnit());
      assertEquals("!", input0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(43, uUID0, "YLX[", "", true, "nVIO7ErloeWKI\"VK", true, "", "", "9NE", "$9HQ-LflLLlB/-5", linkedList0);
      String string0 = input0.getDataType();
      assertEquals("", input0.getUnit());
      assertEquals("YLX[", input0.getName());
      assertTrue(input0.isDynamic());
      assertEquals(43, input0.getId());
      assertEquals("9NE", input0.getRange());
      assertTrue(input0.isMandatory());
      assertEquals("", input0.getDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        Input.fromJson(jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gr.forth.ics.cbml.chic.hme.server.modelrepo.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getRange();
      assertFalse(input0.isMandatory());
      assertFalse(input0.isDynamic());
      assertEquals(0, input0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      int int0 = input0.getId();
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getUnit();
      assertFalse(input0.isDynamic());
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getValue();
      assertFalse(input0.isMandatory());
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      boolean boolean0 = input0.isDynamic();
      assertFalse(boolean0);
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getDescription();
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      boolean boolean0 = input0.isMandatory();
      assertEquals(0, input0.getId());
      assertFalse(boolean0);
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(78, (UUID) null, "Impossible Exeption", "Impossible Exeption", false, (String) null, false, "SP K$IH_t1[,VUU\u0006", "", "", (String) null, linkedList0);
      input0.getUuid();
      assertEquals(78, input0.getId());
      assertFalse(input0.isDynamic());
      assertEquals("Impossible Exeption", input0.getName());
      assertEquals("", input0.getRange());
      assertFalse(input0.isMandatory());
      assertEquals("SP K$IH_t1[,VUU\u0006", input0.getDataType());
      assertEquals("", input0.getUnit());
      assertEquals("Impossible Exeption", input0.getDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getDefaultValue();
      assertFalse(input0.isDynamic());
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getDataType();
      assertFalse(input0.isMandatory());
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      input0.getName();
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(43, uUID0, "YLX[", "", true, "nVIO7ErloeWKI\"VK", true, "", "", "9NE", "$9HQ-LflLLlB/-5", linkedList0);
      boolean boolean0 = input0.isPatientSpecific();
      assertEquals("YLX[", input0.getName());
      assertTrue(input0.isDynamic());
      assertEquals(43, input0.getId());
      assertEquals("", input0.getDataType());
      assertEquals("9NE", input0.getRange());
      assertTrue(input0.isMandatory());
      assertFalse(boolean0);
      assertEquals("", input0.getDescription());
      assertEquals("", input0.getUnit());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      // Undeclared exception!
      try { 
        input0.isPatientSpecific();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gr.forth.ics.cbml.chic.hme.server.modelrepo.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      input_InputBuilder0.value("!VF-FVVv.D)K`F]");
      Input input0 = input_InputBuilder0.build();
      Input input1 = input0.withValue("!VF-FVVv.D)K`F]");
      //  // Unstable assertion: assertEquals(0, input1.getId());
      //  // Unstable assertion: assertTrue(input1.equals((Object)input0));
      //  // Unstable assertion: assertNotSame(input1, input0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input.InputBuilder input_InputBuilder1 = Input.builder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Input.InputBuilder input_InputBuilder2 = input_InputBuilder1.semTypes(list0);
      Input input0 = input_InputBuilder0.build();
      Input input1 = input_InputBuilder2.build();
      boolean boolean0 = input0.equals(input1);
      assertFalse(input1.isMandatory());
      assertFalse(boolean0);
      assertFalse(input1.isDynamic());
      assertEquals(0, input1.getId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      input_InputBuilder0.range("f");
      Input input0 = input_InputBuilder0.build();
      Input input1 = input_InputBuilder0.build();
      boolean boolean0 = input1.equals(input0);
      assertFalse(input1.isMandatory());
      assertEquals(0, input1.getId());
      assertFalse(input1.isDynamic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input input0 = input_InputBuilder0.build();
      Input input1 = input0.withValue("w~C");
      boolean boolean0 = input1.equals(input0);
      assertFalse(input0.isDynamic());
      assertEquals(0, input1.getId());
      assertFalse(input0.isMandatory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Input input0 = input_InputBuilder0.build();
      Input input1 = new Input(45, (UUID) null, "69uZSt{ER.h&+w", "69uZSt{ER.h&+w", false, "null map", true, "\t", "M$6B1GIdZ@R", "null map", "5", list0);
      boolean boolean0 = input0.equals(input1);
      assertEquals("69uZSt{ER.h&+w", input1.getDescription());
      assertEquals("null map", input1.getRange());
      assertEquals(0, input0.getId());
      assertFalse(boolean0);
      assertEquals("69uZSt{ER.h&+w", input1.getName());
      assertFalse(input1.isMandatory());
      assertEquals("\t", input1.getDataType());
      assertEquals("M$6B1GIdZ@R", input1.getUnit());
      assertTrue(input1.isDynamic());
      assertEquals(45, input1.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      boolean boolean0 = input0.equals(" Object together");
      assertFalse(input0.isDynamic());
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input input0 = input_InputBuilder0.build();
      input_InputBuilder0.range("lsC:DRG b'!");
      Input input1 = input_InputBuilder0.build();
      boolean boolean0 = input1.equals(input0);
      assertFalse(boolean0);
      assertFalse(input1.isMandatory());
      assertFalse(input1.isDynamic());
      assertEquals(0, input1.getId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.dynamic(true);
      Input input0 = input_InputBuilder1.build();
      input0.hashCode();
      assertFalse(input0.isMandatory());
      assertEquals(0, input0.getId());
      assertTrue(input0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      input_InputBuilder0.mandatory(true);
      Input input0 = input_InputBuilder0.build();
      input0.hashCode();
      assertTrue(input0.isMandatory());
      assertFalse(input0.isDynamic());
      assertEquals(0, input0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("]C&+~=\"`uN3@E{ ");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Input input0 = new Input(966, uUID0, "fpn;8xCIaX'@!/Oo.S", "]C&+~=\"`uN3@E{ ", false, "5=z9#4IQ3c#))v~JYc", false, "fpn;8xCIaX'@!/Oo.S", "fpn;8xCIaX'@!/Oo.S", "fpn;8xCIaX'@!/Oo.S", "Input.InputBuilder(id=", linkedList0);
      input0.hashCode();
      assertEquals("fpn;8xCIaX'@!/Oo.S", input0.getName());
      assertEquals("fpn;8xCIaX'@!/Oo.S", input0.getRange());
      assertEquals("fpn;8xCIaX'@!/Oo.S", input0.getUnit());
      assertEquals("fpn;8xCIaX'@!/Oo.S", input0.getDataType());
      assertEquals("]C&+~=\"`uN3@E{ ", input0.getDescription());
      assertEquals(966, input0.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.semTypes(list0);
      Input input0 = input_InputBuilder0.build();
      Input input1 = input_InputBuilder1.build();
      boolean boolean0 = input0.equals(input1);
      assertTrue(boolean0);
      assertFalse(input1.isDynamic());
      assertFalse(input1.isMandatory());
      assertEquals(0, input1.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.dynamic(true);
      Input input0 = input_InputBuilder1.build();
      boolean boolean0 = input0.isDynamic();
      assertEquals(0, input0.getId());
      assertFalse(input0.isMandatory());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.name("");
      assertSame(input_InputBuilder0, input_InputBuilder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      UUID uUID0 = MockUUID.randomUUID();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.uuid(uUID0);
      assertSame(input_InputBuilder0, input_InputBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = new Input.InputBuilder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.defaultValue(", value=");
      assertSame(input_InputBuilder1, input_InputBuilder0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      String string0 = input_InputBuilder0.toString();
      assertEquals("Input.InputBuilder(id=0, uuid=null, name=null, description=null, mandatory=false, defaultValue=null, dynamic=false, dataType=null, unit=null, range=null, value=null, semTypes=null)", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.description("\b");
      assertSame(input_InputBuilder1, input_InputBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.unit("\b");
      assertSame(input_InputBuilder1, input_InputBuilder0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input.InputBuilder input_InputBuilder1 = input_InputBuilder0.dataType("\b");
      assertSame(input_InputBuilder0, input_InputBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Input.InputBuilder input_InputBuilder0 = Input.builder();
      Input input0 = input_InputBuilder0.build();
      String string0 = input0.toString();
      assertEquals("NAME: null TYPE: null UNIT: null RANGE: null DEF:  (null)", string0);
      assertEquals(0, input0.getId());
      assertFalse(input0.isDynamic());
      assertFalse(input0.isMandatory());
  }
}
