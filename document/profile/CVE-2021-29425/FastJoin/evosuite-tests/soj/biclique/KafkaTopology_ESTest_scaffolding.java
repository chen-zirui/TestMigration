/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jul 21 07:16:45 GMT 2023
 */

package soj.biclique;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class KafkaTopology_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "soj.biclique.KafkaTopology"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(KafkaTopology_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.kafka.common.network.Selectable",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdStandardSchemeFactory",
      "org.apache.storm.generated.DebugOptions$DebugOptionsStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.reader.ReaderException",
      "org.apache.storm.shade.org.apache.curator.utils.ZookeeperFactory",
      "org.apache.storm.security.auth.AuthUtils",
      "org.apache.storm.shade.org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "clojure.lang.PersistentHashMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.StreamEndEvent",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$FlowStyle",
      "org.apache.storm.shade.org.yaml.snakeyaml.resolver.Resolver",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceFirstEntry",
      "org.apache.storm.shade.org.apache.commons.lang.exception.Nestable",
      "org.apache.storm.generated.KeyAlreadyExistsException$_Fields",
      "org.apache.storm.thrift.transport.TIOStreamTransport",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.FlowMappingEndToken",
      "org.apache.storm.thrift.TFieldIdEnum",
      "org.apache.storm.shade.org.apache.curator.connection.ConnectionHandlingPolicy",
      "org.apache.storm.generated.ReadableBlobMeta$ReadableBlobMetaTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.Represent",
      "org.apache.storm.security.auth.IPrincipalToLocal",
      "org.apache.storm.tuple.Fields",
      "clojure.lang.ArityException",
      "org.apache.storm.generated.AlreadyAliveException$AlreadyAliveExceptionTupleSchemeFactory",
      "org.apache.storm.topology.IBasicBolt",
      "org.apache.storm.shade.org.yaml.snakeyaml.introspector.Property",
      "org.apache.storm.daemon.Shutdownable",
      "org.apache.storm.dependency.DependencyUploader",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentBoolean",
      "org.apache.storm.generated.SettableBlobMeta",
      "org.apache.storm.generated.AuthorizationException$AuthorizationExceptionStandardSchemeFactory",
      "org.apache.storm.hooks.SubmitterHookException",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingKey",
      "org.apache.storm.generated.InvalidTopologyException$InvalidTopologyExceptionStandardSchemeFactory",
      "org.apache.storm.thrift.meta_data.MapMetaData",
      "scala.collection.generic.GenericTraversableTemplate",
      "org.apache.storm.generated.Bolt$_Fields",
      "org.apache.storm.generated.ExecutorStats$ExecutorStatsStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.BaseConstructor",
      "org.apache.storm.kafka.spout.Func",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$FirstPollOffsetStrategy",
      "org.apache.storm.validation.ConfigValidation",
      "org.apache.storm.shade.org.yaml.snakeyaml.error.YAMLException",
      "org.apache.storm.generated.TopologyInitialStatus",
      "clojure.lang.PersistentHashMap$INode",
      "org.apache.storm.serialization.SerializationDelegate",
      "scala.collection.GenSeqLike",
      "org.apache.storm.generated.ExecutorSummary$_Fields",
      "org.apache.storm.utils.Utils",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.Escaper",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.DocumentStartEvent",
      "org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$PollCondition",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdTupleScheme",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockNode",
      "org.apache.storm.shade.org.apache.curator.framework.api.ACLProvider",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff",
      "org.apache.storm.generated.JavaObject$JavaObjectTupleSchemeFactory",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$Builder",
      "kafka.utils.SystemTime$",
      "org.apache.storm.thrift.scheme.SchemeFactory",
      "org.apache.storm.thrift.protocol.TStruct",
      "org.apache.storm.generated.StateSpoutSpec",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.composer.ComposerException",
      "org.apache.storm.shade.org.yaml.snakeyaml.reader.StreamReader",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.ScannerImpl",
      "org.apache.storm.generated.TopologyInfo$TopologyInfoStandardSchemeFactory",
      "org.apache.storm.generated.ComponentCommon",
      "org.apache.storm.generated.AlreadyAliveException",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.SimpleKey",
      "org.apache.storm.kafka.spout.EmptyKafkaTupleListener",
      "org.apache.kafka.clients.KafkaClient",
      "org.apache.storm.generated.KeyNotFoundException$KeyNotFoundExceptionStandardSchemeFactory",
      "org.apache.storm.generated.JavaObject",
      "org.apache.storm.grouping.CustomStreamGrouping",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNull",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.StreamEndToken",
      "org.apache.kafka.clients.consumer.Consumer",
      "org.apache.storm.utils.Utils$SmartThread",
      "org.apache.storm.generated.DebugOptions$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.CollectionNode",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper",
      "org.apache.storm.shade.org.json.simple.parser.ParseException",
      "org.apache.storm.thrift.TBase",
      "clojure.lang.ILookup",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp",
      "scala.collection.TraversableOnce",
      "org.apache.storm.generated.ExecutorSummary$ExecutorSummaryStandardSchemeFactory",
      "org.kohsuke.args4j.CmdLineException",
      "org.apache.storm.generated.ReadableBlobMeta",
      "org.apache.storm.security.auth.IHttpCredentialsPlugin",
      "org.apache.storm.generated.NullStruct",
      "org.apache.storm.thrift.protocol.TProtocolException",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.MappingEndEvent",
      "org.apache.storm.StormSubmitter$ProgressListener",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.AnchorToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingValue",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.Event",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull",
      "clojure.lang.AFn",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentIterator",
      "org.apache.storm.generated.AlreadyAliveException$AlreadyAliveExceptionStandardSchemeFactory",
      "org.apache.storm.generated.Credentials$_Fields",
      "org.apache.storm.StormSubmitter",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.FlowMappingStartToken",
      "clojure.lang.ISeq",
      "org.apache.storm.nimbus.NimbusInfo",
      "org.apache.storm.shade.org.yaml.snakeyaml.util.UriEncoder",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecStandardSchemeFactory",
      "org.apache.kafka.common.config.ConfigException",
      "scala.collection.generic.Subtractable",
      "org.apache.storm.shade.org.yaml.snakeyaml.util.ArrayStack",
      "org.apache.storm.generated.JavaObjectArg",
      "org.apache.storm.generated.SubmitOptions$_Fields",
      "org.apache.storm.generated.Credentials$CredentialsTupleSchemeFactory",
      "org.apache.storm.kafka.spout.ManualPartitioner",
      "clojure.lang.PersistentHashMap$TransientHashMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.BlockSequenceStartToken",
      "org.apache.storm.kafka.spout.RoundRobinManualPartitioner",
      "org.apache.storm.shade.org.yaml.snakeyaml.emitter.Emitable",
      "scala.collection.Parallelizable",
      "org.apache.storm.generated.StormTopology$StormTopologyTupleSchemeFactory",
      "org.apache.storm.thrift.transport.TSocket",
      "org.apache.storm.thrift.protocol.TCompactProtocol",
      "org.apache.storm.kafka.spout.SimpleRecordTranslator",
      "kafka.utils.Logging",
      "org.apache.storm.generated.NotAliveException$_Fields",
      "org.apache.storm.generated.Credentials",
      "org.apache.kafka.clients.consumer.ConsumerRecord",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$LineBreak",
      "scala.collection.MapLike",
      "org.apache.storm.topology.IComponent",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.AbstractConstruct",
      "org.apache.storm.shade.org.apache.curator.ensemble.exhibitor.ExhibitorRestClient",
      "org.apache.storm.shade.org.apache.commons.exec.ExecuteException",
      "org.apache.storm.thrift.transport.TTransport",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryService",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.AliasEvent",
      "org.apache.storm.generated.SettableBlobMeta$SettableBlobMetaStandardSchemeFactory",
      "clojure.lang.IObj",
      "scala.collection.GenMapLike",
      "scala.collection.GenMap",
      "org.apache.storm.generated.TopologyInfo$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr",
      "soj.biclique.TopologyArgs",
      "kafka.utils.CoreUtils$",
      "org.apache.storm.generated.ExecutorStats",
      "org.apache.storm.generated.StormTopology$StormTopologyStandardSchemeFactory",
      "org.apache.storm.shade.org.apache.curator.ensemble.EnsembleProvider",
      "org.apache.storm.generated.StreamInfo$StreamInfoTupleSchemeFactory",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecStandardSchemeFactory",
      "org.apache.storm.scheduler.Cluster",
      "org.apache.storm.generated.GlobalStreamId$GlobalStreamIdStandardScheme",
      "org.apache.storm.blobstore.ClientBlobStore",
      "org.apache.storm.kafka.spout.ManualPartitionSubscription",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentArray",
      "org.apache.storm.generated.AccessControl$_Fields",
      "org.apache.storm.thrift.meta_data.StructMetaData",
      "org.apache.storm.shade.org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.storm.shade.org.yaml.snakeyaml.introspector.PropertyUtils",
      "org.apache.storm.thrift.protocol.TTupleProtocol",
      "org.apache.storm.generated.DebugOptions$DebugOptionsTupleSchemeFactory",
      "scala.collection.immutable.Iterable",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined",
      "org.apache.storm.task.TopologyContext",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.Event$ID",
      "org.apache.storm.generated.ReadableBlobMeta$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.NodeTuple",
      "scala.collection.GenIterable",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.StreamStartToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.FlowSequenceEndToken",
      "org.apache.storm.kafka.spout.KafkaSpoutMessageId",
      "org.apache.storm.generated.DebugOptions",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig",
      "org.apache.storm.generated.SpoutSpec$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$Version",
      "org.apache.storm.generated.KeyAlreadyExistsException",
      "org.apache.storm.utils.Utils$UptimeComputer",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap",
      "org.apache.storm.thrift.meta_data.EnumMetaData",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.KeyToken",
      "clojure.lang.PersistentHashMap$1",
      "org.apache.storm.security.auth.ITransportPlugin",
      "org.apache.kafka.clients.consumer.ConsumerRebalanceListener",
      "org.apache.storm.generated.KeyNotFoundException",
      "clojure.lang.IMapEntry",
      "org.apache.storm.generated.SpoutSpec",
      "org.apache.storm.utils.ShellUtils$ExitCodeException",
      "org.apache.storm.blobstore.AtomicOutputStream",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.AliasToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingFirstKey",
      "org.apache.storm.task.GeneralTopologyContext",
      "scala.collection.immutable.MapLike",
      "org.apache.storm.utils.ZookeeperAuthInfo",
      "scala.Immutable",
      "org.apache.storm.shade.org.apache.zookeeper.data.Id",
      "org.apache.storm.generated.StormTopology",
      "org.apache.storm.generated.SettableBlobMeta$SettableBlobMetaTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.BlockEndToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$ScalarStyle",
      "org.apache.storm.thrift.scheme.IScheme",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.SequenceNode",
      "scala.collection.Traversable",
      "org.apache.storm.shade.org.yaml.snakeyaml.resolver.ResolverTuple",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.SequenceEndEvent",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentByteArray",
      "org.apache.storm.generated.StateSpoutSpec$_Fields",
      "org.apache.storm.generated.JavaObject$JavaObjectStandardSchemeFactory",
      "clojure.lang.Seqable",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.Token",
      "org.apache.storm.generated.GlobalStreamId",
      "org.apache.storm.generated.ExecutorSummary",
      "soj.util.FileWriter",
      "com.esotericsoftware.minlog.Log",
      "org.apache.storm.generated.Bolt$BoltTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.BlockMappingStartToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentEnd",
      "org.apache.storm.shade.org.apache.commons.compress.archivers.tar.TarConstants",
      "org.apache.storm.topology.IRichSpout",
      "org.apache.storm.generated.ShellComponent$ShellComponentTupleSchemeFactory",
      "org.apache.kafka.common.KafkaException",
      "org.apache.storm.generated.NullStruct$NullStructStandardSchemeFactory",
      "org.apache.storm.shade.org.apache.curator.RetryPolicy",
      "org.apache.storm.thrift.scheme.TupleScheme",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.ConstructorException",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.BaseRepresenter$1",
      "org.apache.storm.generated.AccessControl$AccessControlTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.VersionTagsTuple",
      "org.apache.storm.generated.NotAliveException$NotAliveExceptionTupleSchemeFactory",
      "org.apache.storm.shade.org.apache.commons.io.input.ClassLoaderObjectInputStream",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff$RetryEntryTimeStampComparator",
      "org.apache.storm.generated.ShellComponent$ShellComponentStandardSchemeFactory",
      "org.apache.storm.kafka.spout.TopicFilter",
      "kafka.utils.Log4jController$",
      "scala.collection.Map",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntry",
      "org.apache.storm.generated.ReadableBlobMeta$ReadableBlobMetaStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNumber",
      "com.codahale.metrics.Metric",
      "org.apache.storm.generated.AuthorizationException$AuthorizationExceptionTupleSchemeFactory",
      "org.apache.storm.generated.AccessControl$AccessControlStandardSchemeFactory",
      "org.apache.storm.generated.TopologyInfo",
      "org.apache.storm.security.auth.ThriftClient",
      "org.apache.storm.generated.ShellComponent",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentStart",
      "clojure.lang.IMeta",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff$RetrySchedule",
      "clojure.lang.ITransientAssociative",
      "scala.collection.generic.FilterMonadic",
      "org.apache.storm.generated.ErrorInfo",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter",
      "scala.collection.GenIterableLike",
      "org.apache.storm.thrift.transport.TMemoryInputTransport",
      "scala.Equals",
      "org.apache.storm.generated.Grouping$_Fields",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$ProcessingGuarantee",
      "org.apache.storm.generated.StateSpoutSpec$StateSpoutSpecTupleSchemeFactory",
      "org.apache.storm.generated.AccessControlType",
      "org.apache.storm.scheduler.Topologies",
      "clojure.lang.MapEquivalence",
      "scala.collection.GenTraversable",
      "scala.collection.GenSeq",
      "clojure.lang.IEditableCollection",
      "clojure.lang.ITransientMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.Production",
      "org.apache.storm.spout.ISpout",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentString",
      "org.apache.storm.kafka.spout.DefaultRecordTranslator",
      "org.apache.storm.generated.StreamInfo",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.TagToken",
      "clojure.lang.IMapIterable",
      "org.apache.storm.generated.SubmitOptions$SubmitOptionsTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseImplicitDocumentStart",
      "org.apache.storm.thrift.protocol.TProtocolFactory",
      "scala.collection.SeqLike",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.Constructor",
      "org.apache.storm.generated.Nimbus$Iface",
      "clojure.lang.ATransientMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.BlockEntryToken",
      "org.apache.storm.generated.ExecutorInfo$ExecutorInfoTupleSchemeFactory",
      "org.apache.storm.generated.StormTopology$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.DirectiveToken",
      "org.apache.storm.generated.ExecutorStats$_Fields",
      "org.apache.storm.generated.StreamInfo$StreamInfoStandardSchemeFactory",
      "org.apache.storm.shade.org.apache.curator.ensemble.exhibitor.Exhibitors$BackupConnectionStringProvider",
      "org.apache.storm.generated.StormTopology$StormTopologyStandardScheme",
      "org.apache.storm.generated.ExecutorInfo$_Fields",
      "org.apache.storm.utils.NimbusClient$WithNimbus",
      "org.apache.storm.utils.NimbusClient",
      "org.apache.storm.task.WorkerTopologyContext",
      "kafka.utils.Logging$class",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntry",
      "org.apache.storm.generated.InvalidTopologyException$InvalidTopologyExceptionTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.DocumentEndToken",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.DocumentEndEvent",
      "org.apache.storm.generated.AccessControl",
      "org.apache.storm.generated.NullStruct$_Fields",
      "org.apache.storm.thrift.TEnum",
      "org.apache.storm.task.IBolt",
      "org.apache.storm.generated.GlobalStreamId$_Fields",
      "org.apache.storm.utils.NimbusLeaderNotFoundException",
      "scala.PartialFunction",
      "org.apache.kafka.common.utils.Time",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentSet",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq",
      "org.apache.storm.annotation.InterfaceStability$Unstable",
      "org.apache.storm.generated.ExecutorSummary$ExecutorSummaryTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.MappingNode",
      "org.apache.storm.thrift.meta_data.FieldMetaData",
      "org.apache.storm.shade.org.apache.curator.framework.state.ConnectionStateErrorPolicy",
      "org.apache.storm.generated.ExecutorSpecificStats",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.Representer$RepresentJavaBean",
      "org.apache.storm.generated.ComponentObject$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.resolver.Resolver$1",
      "org.apache.storm.shade.org.apache.commons.compress.archivers.ArchiveEntry",
      "org.apache.storm.shade.org.yaml.snakeyaml.reader.UnicodeReader",
      "org.apache.storm.thrift.TUnion$TUnionTupleSchemeFactory",
      "org.apache.storm.generated.KeyNotFoundException$KeyNotFoundExceptionTupleSchemeFactory",
      "clojure.lang.IPersistentCollection",
      "scala.collection.GenTraversableLike",
      "org.apache.storm.security.auth.IGroupMappingServiceProvider",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.DocumentStartToken",
      "org.apache.storm.thrift.meta_data.FieldValueMetaData",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.Representer",
      "org.apache.storm.shade.org.apache.curator.utils.InternalACLProvider",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.Construct",
      "clojure.lang.IFn",
      "org.apache.storm.thrift.protocol.TBinaryProtocol",
      "org.apache.storm.shade.org.json.simple.JSONAware",
      "org.apache.storm.shade.org.yaml.snakeyaml.introspector.BeanAccess",
      "org.apache.storm.thrift.TApplicationException",
      "org.apache.storm.shade.org.yaml.snakeyaml.introspector.MissingProperty",
      "org.apache.storm.scheduler.resource.ResourceUtils",
      "org.apache.storm.generated.KeyAlreadyExistsException$KeyAlreadyExistsExceptionStandardSchemeFactory",
      "org.apache.storm.generated.ComponentCommon$ComponentCommonStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentDate",
      "kafka.utils.Log4jControllerMBean",
      "org.apache.storm.shade.org.apache.curator.framework.CuratorFrameworkFactory$Builder",
      "org.apache.storm.generated.ErrorInfo$ErrorInfoStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.FlowSequenceStartToken",
      "org.apache.storm.kafka.spout.RecordTranslator",
      "org.apache.storm.kafka.spout.NamedTopicFilter",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentEnum",
      "org.apache.storm.thrift.scheme.StandardScheme",
      "scala.reflect.ScalaSignature",
      "org.apache.storm.generated.NullStruct$NullStructTupleSchemeFactory",
      "org.apache.storm.generated.JavaObject$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.Tag",
      "org.apache.storm.blobstore.BlobStore",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.ScalarEvent",
      "org.apache.storm.shade.org.apache.jute.InputArchive",
      "org.apache.storm.generated.KeyNotFoundException$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor",
      "org.apache.kafka.clients.consumer.OffsetCommitCallback",
      "org.apache.storm.thrift.TUnion",
      "org.apache.storm.generated.Bolt$BoltStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.ScalarNode",
      "scala.runtime.BoxesRunTime",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt",
      "org.apache.storm.thrift.TServiceClient",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff$TimeInterval",
      "scala.collection.Seq",
      "org.apache.storm.generated.TopologyInfo$TopologyInfoTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.ScalarToken",
      "soj.biclique.KafkaTopology",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.ImplicitTuple",
      "org.apache.storm.generated.AuthorizationException",
      "org.apache.storm.generated.Credentials$CredentialsStandardSchemeFactory",
      "org.apache.storm.shade.org.apache.jute.Record",
      "org.apache.storm.generated.NotAliveException",
      "org.apache.storm.thrift.transport.TTransportException",
      "org.apache.storm.metric.api.IMetric",
      "org.apache.storm.Config",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceFirstEntry",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl$ParseStreamStart",
      "scala.Function0",
      "scala.Function1",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.Node",
      "scala.Function2",
      "org.apache.storm.generated.InvalidTopologyException$_Fields",
      "org.apache.storm.generated.SpoutSpec$SpoutSpecTupleSchemeFactory",
      "org.apache.storm.shade.org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.storm.generated.ExecutorInfo",
      "org.apache.storm.generated.SubmitOptions$SubmitOptionsStandardSchemeFactory",
      "org.apache.kafka.common.serialization.Deserializer",
      "org.apache.storm.shade.org.yaml.snakeyaml.error.MarkedYAMLException",
      "org.apache.storm.thrift.meta_data.ListMetaData",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.NodeId",
      "org.apache.storm.thrift.protocol.TProtocol",
      "clojure.lang.Counted",
      "clojure.lang.Associative",
      "org.apache.storm.generated.StormTopology$StormTopologyTupleScheme",
      "org.apache.storm.shade.org.apache.zookeeper.data.ACL",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserException",
      "kafka.utils.Time",
      "org.apache.storm.dependency.FileNotAvailableException",
      "org.apache.storm.shade.org.apache.curator.framework.CuratorFramework",
      "org.apache.storm.kafka.spout.Subscription",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.CollectionStartEvent",
      "clojure.lang.IHashEq",
      "org.apache.storm.generated.JavaObjectArg$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.NodeEvent",
      "clojure.lang.APersistentMap$2",
      "clojure.lang.ITransientCollection",
      "clojure.lang.APersistentMap$3",
      "org.apache.storm.localizer.Localizer",
      "clojure.lang.APersistentMap$1",
      "org.apache.storm.thrift.TUnion$TUnionStandardSchemeFactory",
      "org.apache.storm.generated.SubmitOptions",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.Token$ID",
      "org.apache.storm.generated.StreamInfo$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.BaseRepresenter",
      "org.apache.storm.generated.ExecutorInfo$ExecutorInfoStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.StreamStartEvent",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.Constant",
      "org.apache.storm.utils.VersionInfo",
      "org.apache.storm.shade.org.apache.jute.OutputArchive",
      "kafka.utils.Time$class",
      "org.apache.storm.kafka.spout.KafkaTupleListener",
      "org.apache.storm.security.auth.ThriftConnectionType",
      "clojure.lang.APersistentMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.Yaml",
      "org.apache.storm.generated.ShellComponent$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentMap",
      "org.apache.storm.thrift.TException",
      "org.apache.storm.thrift.protocol.TField",
      "kafka.utils.Log4jController",
      "org.apache.storm.generated.NotAliveException$NotAliveExceptionStandardSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.MappingStartEvent",
      "scala.collection.TraversableLike",
      "org.apache.storm.generated.SettableBlobMeta$_Fields",
      "scala.collection.IterableLike",
      "scala.collection.immutable.Map",
      "org.apache.storm.topology.IRichBolt",
      "org.apache.storm.shade.org.apache.curator.framework.CuratorTempFramework",
      "org.apache.storm.generated.InvalidTopologyException",
      "clojure.lang.IPersistentMap",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.ScannerException",
      "org.apache.storm.shade.org.yaml.snakeyaml.error.Mark",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap",
      "org.apache.storm.shade.org.apache.commons.lang.NotImplementedException",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.Scanner",
      "scala.collection.generic.HasNewBuilder",
      "scala.collection.GenTraversableOnce",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.ScannerImpl$Chomping",
      "org.apache.storm.generated.Bolt",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.Parser",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.SequenceStartEvent",
      "com.esotericsoftware.minlog.Log$Logger",
      "org.apache.storm.task.IMetricsContext",
      "org.apache.storm.shade.org.yaml.snakeyaml.composer.Composer",
      "org.apache.storm.kafka.spout.PatternTopicFilter",
      "scala.collection.immutable.Traversable",
      "org.apache.storm.generated.ErrorInfo$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter$RepresentList",
      "org.apache.storm.generated.AuthorizationException$_Fields",
      "org.apache.storm.generated.ComponentObject",
      "scala.collection.Iterator",
      "org.apache.storm.generated.ComponentCommon$_Fields",
      "org.apache.storm.generated.Grouping",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.ValueToken",
      "org.apache.storm.generated.ErrorInfo$ErrorInfoTupleSchemeFactory",
      "scala.collection.Iterable",
      "org.apache.storm.generated.ExecutorStats$ExecutorStatsTupleSchemeFactory",
      "org.apache.storm.generated.AlreadyAliveException$_Fields",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper$2",
      "org.apache.storm.generated.KeyAlreadyExistsException$KeyAlreadyExistsExceptionTupleSchemeFactory",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.CollectionEndEvent",
      "org.apache.storm.thrift.TDeserializer",
      "org.apache.storm.daemon.JarTransformer",
      "org.apache.storm.generated.Nimbus$Client"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(KafkaTopology_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "soj.biclique.KafkaTopology",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$FirstPollOffsetStrategy",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig$ProcessingGuarantee",
      "org.apache.storm.shade.org.yaml.snakeyaml.constructor.SafeConstructor",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.NodeId",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper",
      "org.apache.storm.shade.org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper",
      "org.apache.storm.shade.org.yaml.snakeyaml.util.UriEncoder",
      "org.apache.storm.shade.org.yaml.snakeyaml.nodes.Tag",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.SafeRepresenter",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$FlowStyle",
      "org.apache.storm.shade.org.yaml.snakeyaml.representer.BaseRepresenter$1",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$ScalarStyle",
      "org.apache.storm.shade.org.yaml.snakeyaml.DumperOptions$LineBreak",
      "org.apache.storm.shade.org.yaml.snakeyaml.resolver.Resolver",
      "org.apache.storm.shade.org.yaml.snakeyaml.introspector.BeanAccess",
      "org.apache.storm.shade.org.yaml.snakeyaml.reader.StreamReader",
      "org.apache.storm.shade.org.yaml.snakeyaml.parser.ParserImpl",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.ScannerImpl",
      "org.apache.storm.shade.org.yaml.snakeyaml.events.Event$ID",
      "org.apache.storm.shade.org.yaml.snakeyaml.tokens.Token$ID",
      "org.apache.storm.shade.org.yaml.snakeyaml.scanner.Constant",
      "org.apache.storm.shade.org.yaml.snakeyaml.resolver.Resolver$1",
      "org.apache.storm.utils.Utils",
      "org.apache.storm.StormSubmitter",
      "org.apache.storm.validation.ConfigValidation",
      "org.apache.storm.scheduler.resource.ResourceUtils",
      "org.apache.storm.security.auth.AuthUtils",
      "org.apache.storm.generated.TopologyInitialStatus",
      "org.apache.storm.utils.NimbusClient",
      "org.apache.storm.utils.VersionInfo",
      "com.esotericsoftware.minlog.Log",
      "org.apache.storm.kafka.spout.RoundRobinManualPartitioner",
      "org.apache.storm.kafka.spout.PatternTopicFilter",
      "org.apache.storm.kafka.spout.Subscription",
      "org.apache.storm.kafka.spout.ManualPartitionSubscription",
      "org.apache.storm.tuple.Fields",
      "org.apache.storm.kafka.spout.DefaultRecordTranslator",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff$RetryEntryTimeStampComparator",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff",
      "org.apache.storm.kafka.spout.KafkaSpoutRetryExponentialBackoff$TimeInterval",
      "org.apache.storm.kafka.spout.EmptyKafkaTupleListener",
      "org.apache.storm.kafka.spout.KafkaSpoutConfig",
      "org.apache.storm.generated.StormTopology$_Fields",
      "org.apache.storm.thrift.meta_data.FieldMetaData",
      "org.apache.storm.thrift.meta_data.FieldValueMetaData",
      "org.apache.storm.thrift.meta_data.MapMetaData",
      "org.apache.storm.thrift.meta_data.StructMetaData",
      "org.apache.storm.thrift.meta_data.ListMetaData",
      "org.apache.storm.generated.StormTopology",
      "clojure.lang.APersistentMap",
      "clojure.lang.PersistentHashMap",
      "kafka.utils.CoreUtils$",
      "scala.runtime.BoxesRunTime",
      "kafka.utils.Log4jController$",
      "kafka.utils.SystemTime$",
      "org.apache.storm.task.WorkerTopologyContext",
      "org.apache.storm.generated.GlobalStreamId$_Fields",
      "org.apache.storm.generated.GlobalStreamId",
      "org.apache.storm.kafka.spout.NamedTopicFilter",
      "soj.biclique.TopologyArgs",
      "org.apache.storm.kafka.spout.SimpleRecordTranslator"
    );
  }
}
