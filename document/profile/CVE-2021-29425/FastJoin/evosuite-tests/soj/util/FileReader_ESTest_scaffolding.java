/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jul 21 07:20:11 GMT 2023
 */

package soj.util;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class FileReader_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "soj.util.FileReader"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FileReader_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.hash.HashCode$LongHashCode",
      "soj.util.FileReader",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "com.google.common.collect.PeekingIterator",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.FluentIterable",
      "com.google.common.base.Optional",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.google.common.base.CharMatcher$NegatedFastMatcher",
      "com.google.common.io.ByteSink",
      "com.google.common.collect.Iterators$12",
      "com.google.common.collect.Iterators$11",
      "com.google.common.base.Predicate",
      "com.google.common.collect.TreeTraverser$PostOrderIterator",
      "com.google.common.base.Present",
      "com.google.common.io.ByteSink$AsCharSink",
      "com.google.common.io.CharSource$CharSequenceCharSource",
      "com.google.common.io.MultiReader",
      "com.google.common.io.ByteProcessor",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.RegularImmutableAsList",
      "com.google.common.collect.Iterators$13",
      "com.google.common.io.CharSequenceReader",
      "com.google.common.collect.TreeTraverser$PreOrderIterator",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "com.google.common.base.Splitter$3$1",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.hash.PrimitiveSink",
      "com.google.common.io.ByteSource",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.google.common.base.Charsets",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.hash.HashCode",
      "com.google.common.base.CharMatcher",
      "com.google.common.collect.AbstractIterator",
      "com.google.common.base.CharMatcher$NegatedMatcher",
      "com.google.common.io.FileWriteMode",
      "com.google.common.base.CharMatcher$And",
      "com.google.common.collect.ImmutableList$1",
      "com.google.common.base.CharMatcher$5",
      "com.google.common.base.CharMatcher$4",
      "com.google.common.io.ByteSource$EmptyByteSource",
      "com.google.common.base.CharMatcher$3",
      "com.google.common.base.CharMatcher$2",
      "com.google.common.io.OutputSupplier",
      "com.google.common.base.CharMatcher$9",
      "com.google.common.base.CharMatcher$8",
      "com.google.common.base.CharMatcher$7",
      "com.google.common.base.CharMatcher$6",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.io.ByteSource$AsCharSource",
      "com.google.common.io.MultiInputStream",
      "com.google.common.base.CharMatcher$1",
      "com.google.common.io.InputSupplier",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.io.Files$2",
      "com.google.common.base.CharMatcher$12",
      "com.google.common.base.CharMatcher$11",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.base.CharMatcher$10",
      "com.google.common.base.CharMatcher$15",
      "com.google.common.base.CharMatcher$14",
      "com.google.common.base.CharMatcher$13",
      "com.google.common.io.Files$FileByteSink",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.base.CharMatcher$BitSetMatcher",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.base.CharMatcher$RangesMatcher",
      "com.google.common.base.Splitter",
      "com.google.common.collect.SingletonImmutableList",
      "com.google.common.collect.Iterators$6",
      "com.google.common.collect.Iterators$7",
      "com.google.common.base.Function",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.io.ByteSource$SlicedByteSource",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.Iterators$2",
      "com.google.common.collect.Iterators$3",
      "com.google.common.collect.TreeTraverser$1",
      "com.google.common.collect.TreeTraverser$2",
      "com.google.common.collect.TreeTraverser$3",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "com.google.common.hash.HashFunction",
      "org.apache.commons.io.FilenameUtils",
      "com.google.common.base.Splitter$Strategy",
      "com.google.common.collect.Lists$1",
      "org.apache.commons.io.IOCase",
      "com.google.common.base.AbstractIterator$1",
      "com.google.common.io.CharSource$EmptyCharSource",
      "com.google.common.io.CharSource$ConcatenatedCharSource",
      "com.google.common.io.CharSink",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.TreeTraverser",
      "com.google.common.collect.ImmutableList",
      "com.google.common.io.Files",
      "com.google.common.base.AbstractIterator$State",
      "com.google.common.io.Files$FileByteSource",
      "com.google.common.collect.FluentIterable$1",
      "com.google.common.io.CharSource",
      "com.google.common.base.Splitter$3",
      "com.google.common.base.Splitter$5",
      "com.google.common.hash.HashCode$IntHashCode",
      "com.google.common.hash.HashCode$BytesHashCode",
      "com.google.common.base.CharMatcher$Or",
      "com.google.common.io.LineProcessor",
      "com.google.common.io.ByteSource$ByteArrayByteSource",
      "com.google.common.base.Splitter$SplittingIterator",
      "com.google.common.base.AbstractIterator",
      "com.google.common.io.ByteSource$ConcatenatedByteSource",
      "com.google.common.collect.Iterators$MergingIterator",
      "com.google.common.collect.TreeTraverser$BreadthFirstIterator"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FileReader_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "soj.util.FileReader",
      "org.apache.commons.io.FilenameUtils",
      "com.google.common.base.Charsets",
      "com.google.common.base.CharMatcher$15",
      "com.google.common.base.CharMatcher",
      "com.google.common.io.Files",
      "com.google.common.base.AbstractIterator$State",
      "com.google.common.collect.Iterators",
      "com.google.common.base.AbstractIterator$1"
    );
  }
}
