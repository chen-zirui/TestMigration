/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 24 06:50:31 GMT 2023
 */

package com.github.t3t5u.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.t3t5u.common.util.ZipUtils;
import java.io.File;
import java.io.InputStream;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipUtils_ESTest extends ZipUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.create("create", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.create("", "getInputStream");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.github.t3t5u.common.util.ZipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.create("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.github.t3t5u.common.util.ZipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = ZipUtils.closeQuietly((ZipFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("9", "9");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry((File) mockFile0, "9");
      InputStream inputStream0 = ZipUtils.getInputStreamOrNull((ZipFile) null, zipArchiveEntry0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipFile zipFile0 = ZipUtils.createOrNull("wS ,Gb|ioo=Y.To2R", "");
      assertNull(zipFile0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipFile zipFile0 = ZipUtils.createOrNull("getInputStream", "+gn,<U]#xRC/7cAt7");
      assertNull(zipFile0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipFile zipFile0 = ZipUtils.createOrNull("", "");
      assertNull(zipFile0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipFile zipFile0 = ZipUtils.createOrNull("");
      assertNull(zipFile0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipFile zipFile0 = ZipUtils.createOrNull("l.ZC098QI8M[");
      assertNull(zipFile0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.close((ZipFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.util.ZipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.getInputStream((ZipFile) null, (ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.t3t5u.common.util.ZipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.create((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipUtils.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
