/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 24 06:23:47 GMT 2023
 */

package org.intocps.fmi.jnifmuapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.NoSuchFileException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.intocps.fmi.jnifmuapi.FmiUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FmiUtil_ESTest extends FmiUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.FMI2;
      File file0 = FmiUtil.generateLibraryFile("+v/'", mockFile0, fmiUtil_FMIVersion0);
      try { 
        FmiUtil.unPack(mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FmiUtil.FMIVersion[] fmiUtil_FMIVersionArray0 = FmiUtil.FMIVersion.values();
      assertNotNull(fmiUtil_FMIVersionArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.valueOf("FMI3");
      assertEquals(FmiUtil.FMIVersion.FMI3, fmiUtil_FMIVersion0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = FmiUtil.getModelIdentifier(mockFileInputStream0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.FMI2;
      File file0 = FmiUtil.generateLibraryFile("", (File) null, fmiUtil_FMIVersion0);
      assertEquals("/data1/ziruichen/TestMigration/resource/CVE-2018-1324/org.intocps.maestro.fmi/jnifmuapi/binaries/linux64/.so", file0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\r", "6+>lsmyZ1!x}_>l7");
      try { 
        FmiUtil.unPack(mockFile0, mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FmiUtil.logMessageLibraryPath((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.intocps.fmi.jnifmuapi.FmiUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FmiUtil.getModelIdentifier((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FmiUtil.getFmuName((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.intocps.fmi.jnifmuapi.FmiUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FmiUtil.createTempDir("U,o6hA!)pt/D'qiu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid prefix or suffix
         //
         verifyException("java.nio.file.TempFileHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = FmiUtil.createTempDir("6 -6DOq],Z|*3TH'");
      try { 
        FmiUtil.getFmuName(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid fmu name: 6 -6DOq],Z|*3TH'4721051779431608034
         //
         verifyException("org.intocps.fmi.jnifmuapi.FmiUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = FmiUtil.createTempDir("");
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.FMI2;
      File file1 = FmiUtil.generateLibraryFileFromPlatform("linux32", "", "", file0, fmiUtil_FMIVersion0);
      //  // Unstable assertion: assertEquals("/tmp/8246107784768232732/binaries/linux32", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = FmiUtil.createTempDir("");
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.FMI2;
      File file1 = FmiUtil.generateLibraryFileFromPlatform("jF5LDsBu?S", "fmiModelDescription/CoSimulation/@modelIdentifier", "", file0, fmiUtil_FMIVersion0);
      // Undeclared exception!
      try { 
        FmiUtil.generateLibraryFileFromPlatform((String) null, "y!h/yq", "jF5LDsBu?S", file1, fmiUtil_FMIVersion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.intocps.fmi.jnifmuapi.FmiUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FmiUtil fmiUtil0 = new FmiUtil();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = FmiUtil.createTempDir("");
      // Undeclared exception!
      try { 
        FmiUtil.logMessageLibraryPath(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = FmiUtil.createTempDir("6 -6DOq],Z|*3TH'");
      FmiUtil.FMIVersion fmiUtil_FMIVersion0 = FmiUtil.FMIVersion.FMI3;
      File file1 = FmiUtil.generateLibraryFile("QR)`zQ", file0, fmiUtil_FMIVersion0);
      String string0 = FmiUtil.logMessageLibraryPath(file1);
      //  // Unstable assertion: assertEquals(1690179824510L, file0.lastModified());
      //  // Unstable assertion: assertEquals("binaries/x86_64-linux/QR)`zQ.so", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FmiUtil.unPack((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.intocps.fmi.jnifmuapi.FmiUtil", e);
      }
  }
}
