/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 28 14:07:46 GMT 2023
 */

package com.fr.chain.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fr.chain.utils.NumberUtil;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberUtil_ESTest extends NumberUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = NumberUtil.min((short)0, (short) (-5), (short)0);
      assertEquals((short) (-5), short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = NumberUtil.max(2969, (int) (byte)0, 2969);
      assertEquals(2969, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = NumberUtil.toLong(",", (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = NumberUtil.toLong("8Fw$9/hcr;j", (-432L));
      assertEquals((-432L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtil.toLong("9");
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtil.toInt("Vio;xX:/Vf\"g1AL&.", 2077);
      assertEquals(2077, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtil.toInt("l", (-4815));
      assertEquals((-4815), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = NumberUtil.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = NumberUtil.toFloat((String) null, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = NumberUtil.toFloat("\uFFE5-2,510.00", (-780.0F));
      assertEquals((-780.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = NumberUtil.toFloat("80.00");
      assertEquals(80.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = NumberUtil.toFloat("-549.00");
      assertEquals((-549.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = NumberUtil.toDouble("i-7", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = NumberUtil.toDouble("", (-2057.384843));
      assertEquals((-2057.384843), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = NumberUtil.toDouble("80.00");
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1665;
      short short0 = NumberUtil.min(shortArray0);
      assertEquals((short)1665, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-1);
      short short0 = NumberUtil.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1564L;
      longArray0[1] = 2005L;
      longArray0[2] = 429L;
      longArray0[3] = 1564L;
      long long0 = NumberUtil.min(longArray0);
      assertEquals(429L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1L);
      long long0 = NumberUtil.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtil.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      int int0 = NumberUtil.min(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[3] = (-1282);
      int int0 = NumberUtil.min(intArray0);
      assertEquals((-1282), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtil.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) (short) (-2123);
      float float0 = NumberUtil.min(floatArray0);
      assertEquals((-2123.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)4;
      double double0 = NumberUtil.min(doubleArray0);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (-1401.12F);
      double double0 = NumberUtil.min(doubleArray0);
      assertEquals((-1401.1199951171875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)51;
      byte byte0 = NumberUtil.min(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-1);
      byte byte0 = NumberUtil.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short short0 = NumberUtil.min((short)4, (short)4, (short)4);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short short0 = NumberUtil.min((short) (-573), (short) (-31), (short) (-31));
      assertEquals((short) (-573), short0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = NumberUtil.min((long) 0, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = NumberUtil.min(1059L, 1L, 1059L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = NumberUtil.min(0, (int) (byte)1, 2940);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = NumberUtil.min(93, 1, 93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = NumberUtil.min((float) (byte)0, 383.3213F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = NumberUtil.min((-1.0F), 886.0F, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = NumberUtil.min(2715.32167, 500.49263, (double) 1602);
      assertEquals(500.49263, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = NumberUtil.min(4.0, (-431.8927), 4.0);
      assertEquals((-431.8927), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = NumberUtil.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = NumberUtil.min((byte)3, (byte)67, (byte)26);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2375;
      short short0 = NumberUtil.max(shortArray0);
      assertEquals((short)2375, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-314);
      shortArray0[1] = (short) (-314);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3);
      short short0 = NumberUtil.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtil.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 2434L;
      long long0 = NumberUtil.max(longArray0);
      assertEquals(2434L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      long long0 = NumberUtil.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtil.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)79;
      int int0 = NumberUtil.max(intArray0);
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int0 = NumberUtil.max(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 3465.02F;
      float float0 = NumberUtil.max(floatArray0);
      assertEquals(3465.02F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2123.0F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-2123.0F);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (short) (-2123);
      float float0 = NumberUtil.max(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1529.0F;
      double double0 = NumberUtil.max(doubleArray0);
      assertEquals(1529.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-431.1695307);
      doubleArray0[1] = (-1024.205364);
      double double0 = NumberUtil.max(doubleArray0);
      assertEquals((-431.1695307), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)65;
      byte byte0 = NumberUtil.max(byteArray0);
      assertEquals((byte)65, byte0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      byte byte0 = NumberUtil.max(byteArray0);
      assertEquals((byte) (-14), byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short short0 = NumberUtil.max((short)0, (short) (-622), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short short0 = NumberUtil.max((short)1665, (short)1665, (short)0);
      assertEquals((short)1665, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = NumberUtil.max((long) (byte)0, (long) (byte)0, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtil.max(0L, 954L, (-1707L));
      assertEquals(954L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = NumberUtil.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = NumberUtil.max((-2218), (-2218), (-2028));
      assertEquals((-2028), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = NumberUtil.max(1529.0F, 567.0F, 567.0F);
      assertEquals(1529.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtil.max((-298.87924F), (-298.87924F), (-298.87924F));
      assertEquals((-298.87924F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = NumberUtil.max((-77.54), (-77.54), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtil.max((-4219.6), (-1832.338389), (-1832.338389));
      assertEquals((-1832.338389), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = NumberUtil.max((byte)0, (byte) (-1), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtil.max((byte)1, (byte)0, (byte)57);
      assertEquals((byte)57, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtil.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = NumberUtil.formatQfw((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = NumberUtil.formatQfw("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtil.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Number number0 = NumberUtil.createNumber("80.00");
      assertEquals(80.0F, number0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = NumberUtil.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = NumberUtil.createLong("9");
      assertEquals(9L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtil.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = NumberUtil.createInteger("8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = NumberUtil.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = NumberUtil.createFloat("5");
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = NumberUtil.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = NumberUtil.createDouble("9");
      assertEquals(9.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtil.createDouble("-2510.00");
      assertEquals((-2510.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = NumberUtil.createDouble("79166514587392.00");
      assertEquals(7.9166514587392E13, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtil.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtil.createBigInteger("7");
      assertEquals(7, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtil.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtil.createBigDecimal("1895572529499009832369049564289511385750044672.00");
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtil.createBigDecimal("1");
      assertEquals(1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(14);
      int int0 = NumberUtil.compare((BigDecimal) null, bigDecimal0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtil.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtil.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtil.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createNumber("ZKJoZ|2I)q5Zqq0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZKJoZ|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createNumber("1E|?x[K?@w]zQl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1E|?x[K?@w]zQl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createInteger("0.00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createDouble("lUJ b^=U!X_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createBigInteger("Xij1[hYnu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createBigDecimal("%ypu(a>B(H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2510L));
      String string0 = NumberUtil.formatQfwAndRmb(bigDecimal0);
      assertEquals("\uFFE5-2,510.00", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      String string0 = NumberUtil.formatQfwAndRmb(bigDecimal0);
      assertEquals("\uFFE5844,424,930,131,968.00", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = NumberUtil.formatQfw("8");
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      String string0 = NumberUtil.formatQfwAndRmb(bigDecimal0);
      assertEquals("\uFFE50.00", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = NumberUtil.formatQfwAndRmb((String) null);
      assertEquals("\uFFE50.00", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.formatQfwAndRmb("-2599.66");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = NumberUtil.compare((BigDecimal) null, (BigDecimal) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) (short) (-1));
      int int0 = NumberUtil.compare((BigDecimal) null, bigDecimal0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2510L));
      int int0 = NumberUtil.compare(bigDecimal0, bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = NumberUtil.min((double) (byte)0, (double) (byte)0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = NumberUtil.max((double) 0, 3049.16440202, (double) 0);
      assertEquals(3049.16440202, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = NumberUtil.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = NumberUtil.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtil numberUtil0 = new NumberUtil();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtil.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NumberUtil.min(3, 578, (-2860));
      assertEquals((-2860), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtil.createBigDecimal("-549.00");
      String string0 = NumberUtil.formatQfwAndRmb(bigDecimal0);
      assertEquals("\uFFE5-549.00", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = NumberUtil.createDouble("0.00");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = NumberUtil.max((long) (byte) (-14), (long) (byte) (-14), (long) (byte) (-14));
      assertEquals((-14L), long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtil.isDigits("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtil.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = NumberUtil.formatQfwAndRmb((BigDecimal) null);
      assertEquals("\uFFE50.00", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.createLong("yQTO6a,?n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yQTO6a,?n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = NumberUtil.min((float) 108, (float) 108, 316.92764F);
      assertEquals(108.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = NumberUtil.max((short) (-2123), (short) (-2123), (short) (-2123));
      assertEquals((short) (-2123), short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = NumberUtil.toFloat("yes", 709.87524F);
      assertEquals(709.87524F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = NumberUtil.toDouble("8", 0.0);
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = NumberUtil.min((byte) (-30), (byte) (-30), (byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = NumberUtil.toFloat("M,/a,o0K#-o ^E");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float float0 = NumberUtil.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtil.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = NumberUtil.toDouble(".");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = NumberUtil.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = NumberUtil.createFloat("-139215580783199.00");
      assertEquals((-1.39215577E14F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = NumberUtil.toLong("-");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtil.min((short)2071, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtil.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = NumberUtil.max(0.0F, 0.0F, (-1050.0F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Number number0 = NumberUtil.createNumber("-2599.66");
      assertEquals((-2599.66F), number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float float0 = NumberUtil.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = NumberUtil.toLong("[3'@gmKP&}oW", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtil.toInt("Bh", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtil.createBigInteger("0");
      assertEquals(0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtil.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = NumberUtil.max((byte) (-14), (byte) (-14), (byte) (-14));
      assertEquals((byte) (-14), byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtil.min((-1L), 1L, 1L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtil.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtil.max(byteArray0);
      assertEquals((byte)0, byte0);
  }
}
