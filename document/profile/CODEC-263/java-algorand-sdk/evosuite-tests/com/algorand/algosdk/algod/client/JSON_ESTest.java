/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 20 04:12:50 GMT 2023
 */

package com.algorand.algosdk.algod.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.algorand.algosdk.algod.client.JSON;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.text.DateFormat;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.threeten.bp.format.DateTimeFormatter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSON.DateTypeAdapter jSON_DateTypeAdapter0 = new JSON.DateTypeAdapter();
      // Undeclared exception!
      try { 
        jSON_DateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.algorand.algosdk.algod.client.JSON$DateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSON.SqlDateTypeAdapter jSON_SqlDateTypeAdapter0 = new JSON.SqlDateTypeAdapter();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader((Reader) pipedReader0);
      try { 
        jSON_SqlDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      JSON.DateTypeAdapter jSON_DateTypeAdapter0 = new JSON.DateTypeAdapter();
      jSON_DateTypeAdapter0.setFormat(dateFormat0);
      assertTrue(dateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSON.OffsetDateTimeTypeAdapter jSON_OffsetDateTimeTypeAdapter0 = new JSON.OffsetDateTimeTypeAdapter((DateTimeFormatter) null);
      jSON_OffsetDateTimeTypeAdapter0.setFormat((DateTimeFormatter) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSON.OffsetDateTimeTypeAdapter jSON_OffsetDateTimeTypeAdapter0 = new JSON.OffsetDateTimeTypeAdapter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) pipedInputStream0);
      try { 
        jSON_OffsetDateTimeTypeAdapter0.fromJson((Reader) inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GsonBuilder gsonBuilder0 = JSON.createGson();
      assertNotNull(gsonBuilder0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSON.DateTypeAdapter jSON_DateTypeAdapter0 = new JSON.DateTypeAdapter();
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jSON_DateTypeAdapter0.fromJsonTree(jsonArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      JSON.DateTypeAdapter jSON_DateTypeAdapter0 = new JSON.DateTypeAdapter(dateFormat0);
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(pipedWriter0);
      MockDate mockDate0 = new MockDate(0L);
      try { 
        jSON_DateTypeAdapter0.write(jsonWriter0, (Date) mockDate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JSON.DateTypeAdapter jSON_DateTypeAdapter0 = new JSON.DateTypeAdapter();
      MockDate mockDate0 = new MockDate();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)jSON_DateTypeAdapter0.toJsonTree(mockDate0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
      JSON.SqlDateTypeAdapter jSON_SqlDateTypeAdapter0 = new JSON.SqlDateTypeAdapter(dateFormat0);
      jSON_SqlDateTypeAdapter0.setFormat(dateFormat0);
      assertTrue(dateFormat0.isLenient());
  }
}
