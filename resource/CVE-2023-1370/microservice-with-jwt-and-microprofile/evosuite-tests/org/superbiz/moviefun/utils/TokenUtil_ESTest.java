/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 13 03:52:07 GMT 2023
 */

package org.superbiz.moviefun.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidParameterException;
import java.security.KeyPair;
import java.security.spec.InvalidKeySpecException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.superbiz.moviefun.utils.TokenUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenUtil_ESTest extends TokenUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenUtil.InvalidClaims[] tokenUtil_InvalidClaimsArray0 = TokenUtil.InvalidClaims.values();
      assertNotNull(tokenUtil_InvalidClaimsArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.valueOf("ALG");
      assertEquals(TokenUtil.InvalidClaims.ALG, tokenUtil_InvalidClaims0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        TokenUtil.readPublicKey("ALG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        TokenUtil.readPrivateKey("l]Lqd5eVAY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        TokenUtil.of("'HWsI");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected End Of File position 5: null
         //
         verifyException("net.minidev.json.parser.JSONParserMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        TokenUtil.of("ALG");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.minidev.json.JSONObject
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.SIGNER;
      jSONObject0.put("exp", tokenUtil_InvalidClaims0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims1 = TokenUtil.InvalidClaims.EXP;
      linkedHashSet0.add(tokenUtil_InvalidClaims1);
      try { 
        TokenUtil.generateTokenString(jSONObject0, (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unexpected type of JSON object member with key \"exp\"
         //
         verifyException("com.nimbusds.jose.util.JSONObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<TokenUtil.InvalidClaims> treeSet0 = new TreeSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString((JSONObject) null, (Set<TokenUtil.InvalidClaims>) treeSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONParser.DEFAULT_PERMISSIVE_MODE = (-3888);
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString("", (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected token Cipher.class
         // CipherProduces.class
         // DecryptedValue.class
         // TokenUtil.class
         // TokenUtil$InvalidClaims.class at position 101.
         //
         verifyException("net.minidev.json.parser.JSONParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString("y&#&|U8-PZ{cS", (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<TokenUtil.InvalidClaims> treeSet0 = new TreeSet<TokenUtil.InvalidClaims>();
      try { 
        TokenUtil.generateTokenString("+,COA/l\"n(6l&", (Set<TokenUtil.InvalidClaims>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        TokenUtil.generateTokenString("ALG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenUtil.generateKeyPair(256);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        TokenUtil.decodePublicKey("");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        TokenUtil.decodePublicKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        TokenUtil.decodePrivateKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        TokenUtil.decodePrivateKey("org.apache.commons.io.filefilter.CanReadFileFilter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 2e
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashSet<TokenUtil.InvalidClaims> hashSet0 = new HashSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString("", (Set<TokenUtil.InvalidClaims>) hashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.minidev.json.JSONObject
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        TokenUtil.readPrivateKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 2e
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = TokenUtil.currentTimeInSecs();
      assertEquals(1392409281, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        TokenUtil.decodePrivateKey("");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashSet<TokenUtil.InvalidClaims> hashSet0 = new HashSet<TokenUtil.InvalidClaims>();
      try { 
        TokenUtil.generateTokenString("", (Set<TokenUtil.InvalidClaims>) hashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.minidev.json.JSONObject
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KeyPair keyPair0 = TokenUtil.generateKeyPair(2048);
      assertNotNull(keyPair0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        TokenUtil.decodePublicKey("N$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 24
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.ALG;
      linkedHashSet0.add(tokenUtil_InvalidClaims0);
      try { 
        TokenUtil.generateTokenString(jSONObject0, (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported JWS algorithm HS256, must be com.nimbusds.jose.JWSAlgorithm@0000000025, com.nimbusds.jose.JWSAlgorithm@0000000026 or com.nimbusds.jose.JWSAlgorithm@0000000027
         //
         verifyException("com.nimbusds.jose.crypto.MACSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.EXP;
      linkedHashSet0.add(tokenUtil_InvalidClaims0);
      try { 
        TokenUtil.generateTokenString(jSONObject0, (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported JWS algorithm RS256, must be com.nimbusds.jose.JWSAlgorithm@0000000021, com.nimbusds.jose.JWSAlgorithm@0000000022, com.nimbusds.jose.JWSAlgorithm@0000000023, com.nimbusds.jose.JWSAlgorithm@0000000024, com.nimbusds.jose.JWSAlgorithm@0000000025 or com.nimbusds.jose.JWSAlgorithm@0000000026
         //
         verifyException("com.nimbusds.jose.crypto.RSASSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashSet<TokenUtil.InvalidClaims> hashSet0 = new HashSet<TokenUtil.InvalidClaims>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.ISSUER;
      hashSet0.add(tokenUtil_InvalidClaims0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString(jSONObject0, (Set<TokenUtil.InvalidClaims>) hashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported JWS algorithm RS256, must be com.nimbusds.jose.JWSAlgorithm@0000000024, com.nimbusds.jose.JWSAlgorithm@0000000025, com.nimbusds.jose.JWSAlgorithm@0000000026, com.nimbusds.jose.JWSAlgorithm@0000000027, com.nimbusds.jose.JWSAlgorithm@0000000028 or com.nimbusds.jose.JWSAlgorithm@0000000029
         //
         verifyException("com.nimbusds.jose.crypto.RSASSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString("", (Set<TokenUtil.InvalidClaims>) null, (Map<String, Long>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.minidev.json.JSONObject
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<TokenUtil.InvalidClaims> linkedHashSet0 = new LinkedHashSet<TokenUtil.InvalidClaims>();
      TokenUtil.InvalidClaims tokenUtil_InvalidClaims0 = TokenUtil.InvalidClaims.SIGNER;
      linkedHashSet0.add(tokenUtil_InvalidClaims0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      try { 
        TokenUtil.generateTokenString(jSONObject0, (Set<TokenUtil.InvalidClaims>) linkedHashSet0, (Map<String, Long>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported JWS algorithm RS256, must be com.nimbusds.jose.JWSAlgorithm@0000000023, com.nimbusds.jose.JWSAlgorithm@0000000024, com.nimbusds.jose.JWSAlgorithm@0000000025, com.nimbusds.jose.JWSAlgorithm@0000000026, com.nimbusds.jose.JWSAlgorithm@0000000027 or com.nimbusds.jose.JWSAlgorithm@0000000028
         //
         verifyException("com.nimbusds.jose.crypto.RSASSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        TokenUtil.generateTokenString("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.minidev.json.JSONObject
         //
         verifyException("org.superbiz.moviefun.utils.TokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        TokenUtil.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.minidev.json.parser.JSONParserString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        TokenUtil.readPublicKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 2e
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }
}
